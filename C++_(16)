//#include<iostream>
//#include<cmath>
/*using namespace std;

class QuadEqt{
	private:
		double a,b,c;
	public:
		void creat(double A,double B,double C)
		{
			a=A;b=B;c=C;
		}
	void show()
	{
		cout<<a<<"x^2"
		    <<(b>=0?"+":"-")<<abs(b)<<"x"
		    <<(c>=0?"+":"-")<<abs(c)<<"= 0"
		    <<endl;
	}
	void solve();
}; 

void QuadEqt::solve(){
	if(abs(a)<=1e-7)return;
	double delta=b*b-4*a*c;
	if(delta>1e-7){
		double s=sqrt(delta);
		cout<<"x1:"<<s1<<"+"<<s2<<'i'<<endl;
		cout<<"x2:"<<s1<<"-"<<s2<<'i'<<endl;
	}
	else
	cout<<"x1,x2:"<<-b/a/2<<endl;
}

int main()
{
	QuadEqt eq;
	eq.creat(1,-6,5);
}

using namespace std;
class Test{
	public:
		int x;
		Test(){
			cout<<"Test";
		}
};
int main()
{
	Test test;
	cout<<test.x;
	return 0;
}
using namespace std;
class TempClass{
	public:
		int i;
		TempClass()
		{
			int i=5;
		}
};
int main()
{
	TempClass temp(2);//err
	return 0;
}
class AA {
	private:
		int a;
	public:
	int getRef( ) const { return &a; }    // err
};
using namespace std;
class A{
	public:
		A();
		double getNumber();
	private:
		double number;
};
	A::A(){
    	number=1;
	}
	double A::getNumber(){
		return number;
	}
void printA(A &a) {
	cout << "The numberr is " << a.getNumber() << endl;
}
int main(){
	A myObject;
	printA(myObject);
	return 0; 
}
using namespace std;
class Count{
	public:
		int count;
		Count(int c){
			count=c;
		}
		Count(){
			count=0;
		}
}; 
void increment(Count&c,int& n)
{
	c.count++;
	n++;
}
int main()
{
	Count myCount;
	int times=0;
	for(int i=0;i<100;i++)
	    increment(myCount,times);
	cout<<myCount.count;
	cout<<times;
	return 0;
}
#include <iostream>

#include <string>

using namespace std;



class Name {

public:

  string firstName;

  char mi;

  string lastName;

  Name(string firstName1, char mi1, string lastName1) {

    firstName = firstName1;

    mi = mi1;

    lastName = lastName1;

  }

};



int main( ) {

  string firstName("John");

  Name name(firstName, 'F', "Smith");

  firstName = "Peter";

  name.lastName = "Pan";

  cout << name.firstName << " " << name.lastName << endl;

}
using namespace std;

class Count {

public:

  int count;

  Count(int c) { count = c; }

  Count( ) { count = 0; }

};

void increment(Count c, int &n) {

  c.count++;

  n++;

}

int main( ) {

  Count myCount;

  int times = 0;

  for (int i = 0; i < 100; i++)

    increment(myCount, times);

  cout << "myCount.count is " << myCount.count;

  cout << " times is " << times;

  return 0;

}
using namespace std;

class Count {

public:

  int count;

  Count(int c) { count = c; }

  Count( ) { count = 0; }

};

void increment(Count c, int times) {

  c.count++;

  times++;

}

int main( ) {

  Count myCount;

  int times = 0;

  for (int i = 0; i < 100; i++)

    increment(myCount, times);

  cout << "myCount.count is " << myCount.count;

  cout << " times is " << times;

  return 0;

}
using namespace std;



class MyDate {

public:

  int year, month, day;



  MyDate( ) {

    year = 2003;

    month = 2;

    day = 3;

  }



  MyDate(int year1, int month1, int day1) {

    year = year1;

    month = month1;

    day = day1;

  }

};



class Name {

public:

  string firstName;

  char mi;

  string lastName;

  MyDate birthDate;



  Name(string firstName1, char mi1, string lastName1, MyDate birthDate1) {

    firstName = firstName1;

    mi = mi1;

    lastName = lastName1;

    birthDate = birthDate1;

  }

};



int main( ) {

  MyDate birthDate(1990, 3, 4);

  Name name("John", 'F', "Smith", birthDate);

  birthDate = MyDate(1991, 1, 2);

  birthDate.year = 1992;

  cout << name.birthDate.year << endl;

  return 0;

}
#include<cstring>
using namespace std;
int main()
{
	char a[]="abc\0def";
	char b[10];
	strcpy(b,a);
	cout<<strlen(b)<<sizeof(b);
	char name[20];
	cin.getline(name,20,'\n');
	cout<<name;
	
	return 0;
} 
using namespace std;
int main()
{
	typedef union {
  long i;
  int k;
  char c;
}DATE;
struct date {
  int cat;
  DATE cow;
  double dog;
} too;
DATE max1;
cout <<  sizeof(max1);
	return 0;
}
using namespace std;
int main()
{
	struct st {
  int no;
  char name [20]; // 20个字符
  float score;
}s1;
cout<<sizeof(s1);
	return 0;
}
using namespace std;
class Circle {
public:
  Circle(double radius) { radius = radius; }
  double getArea( ) const {
    return 3.1415*radius*radius;
  }
private:
  double radius;
};
int main( ) {
  Circle r1(5);
  cout << r1.getArea( ) << endl;
  return 0;
}
using namespace std;
#define DEBUG 2
int main( ) {
  int i = 3;
  #ifndef DEBUG
    cout << DEBUG << "," << i;
  #else
    cout << i << ",";
  #endif
  cout << DEBUG;

  return 0;
}
using namespace std;
int main()
{
	int a=5;
	cout<<&a;
	return 0;
}
using namespace std;
int main( ) {
  char *p;
  cout << "Enter a string: ";
  cin >> p;
  cout << p << endl;
  return 0;
}
using namespace std;
class Circle {
public:
  Circle(double radius) { this->radius = radius; }
  double getArea( ) const {
    return 3.1415*radius*radius;
  }
private:
  double radius;
};
int main( ) {
  Circle r1(5);
  cout << r1.getArea( ) << endl;
  return 0;
}
using namespace std;
struct s {
  int x, y;
} data[2] = {10, 100, 20, 200};
int main( ) {
  struct s *p = data;
  cout << (p[1].x);
  return 0;
}
#include<cstring>
using namespace std;
//int main()
//{
	//int list1[4], list2[4], *p1, *p2;
	//p1=p2;
	//p1=list1;
	//list1=p1;//err
	//list1=list2;//err
	//char a[ ] = "abcdefgh", *q = a + 3;
    //strcpy(q, "ABCD");
    //cout << a;
	//return 0;
//}
int main( ) {
  //char *str = "12345";
  //cout << strlen(str) << " " << sizeof(str);
  //return 0;
  //int a[10]={1,2,3,4,5,6,7,8,9,10},*p=&a[3],b=p[5];
  //cout<<b;
   //int list[ ] = {10, 20, 30, 40};
  //cout << *(list + 1) << " " << *list + 1 << endl;
  //int a[3][3], *p, i;
  //p = &a[0][0];
  //for ( i = 0; i < 9; i ++)
    //p[i] = i + 1;
  //cout << a[1][2] << endl;
  //return 0;
  char arr[10]="abcd";
  strupr(arr);
  cout<<arr;
  
}
#include<stdio.h>
#include<math.h>
#define MAX 10
void swap(int& a, int& b)
{
	int t = a;
	a = b;
	b = t;
}
int main()
{
	int arr[MAX];
	int i = 0;
	int index = 0;
	for (i = 0; i < MAX; i++)
	{
		scanf("%d", &arr[i]);
	}
	for (i = 0; i < MAX - 1; i++)
	{
		index = i;
		for (int j = i+1; j < MAX; j++)
		{
			if (arr[index]>arr[j])
				index = j;
		}
		if (index != i)
		{
			swap(arr[i], arr[index]);
		}
	}
	for (i = 0; i < MAX; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
using namespace std;
void swap(int &x, int &y) {
    int t = x; x = y; y = t;

}
int main() {
      const int N = 5;
      int myList[N] = { 50, 30, 20, 80, 10 };
      for (int i = 0; i < N; i++)
          cout << myList[i] << ", ";
      cout << endl;
      for (int i = 0; i < N - 1; i++) {
          // Find the index of smallest element
          int ind = i;
          for (int j = i + 1; j < N; j++)
              if (myList[j] < myList[ind])
                  ind = j;
          // swap
          if (ind != i)
              swap(myList[i], myList[ind]);
	}

      for (int i = 0; i < N; i++)
          cout << myList[i] << ", ";
      cout << endl;
      return 0;

}
#include<cstring>
using namespace std;
int main()
{
	//int a[10]={1,2,3,4,5,6,7,8,9,10};
	//int *p=&a[3];
	//int b=p[5];
	//cout<<b<<&a<<&a[1];
	//char* str="1234567";
	//cout<<strlen(str)<<sizeof(str);
	//char str[20]={"hello,beijing"},*p=str;
	//cout<<strlen(p+7);
	char* const p = "ABC";
    p[0]='b';
	return 0;
} 
#include <iostream>
using namespace std;
class A {
public:
  int x, y, z;

  A( ): x(1), y(2), z(3) { }
};
int main( ) {
  A a;
  A *p1 = &a;
  a.x = 2;
  A a1;
  p1 = &a1;
  cout << p1->x << " " << (*p1).y << " " << p1->z;
  return 0;
}
using namespace std;
class Test {
private:
  static int n;
public:
  Test( ) { n += 2; }
  ~Test( ) { n -= 3; }
  static int getNum( ) { return n; }
};
int Test::n = 1;
int main( ) {
  Test* p = new Test;
  delete p;
  cout << "n = " << Test::getNum( ) << endl;
  return 0;
}
#include <iostream>

using namespace std;

class Con {

private:

  char ID;

public:

  char getID( )const                 { return ID; }

  Con( ) : ID('A')                       { cout << 1; }

  Con(char id) : ID(id)              { cout << 2; }

  Con(Con& c) : ID(c.getID( )) { cout << 3; }

};

void show(Con c)   {

  cout << c.getID( ); 

}

int main() {

   Con c1;

   show(c1);

   Con c2('B');

   show(c2);
   return 0;

}*/ 
#include<stdio.h>
#include<string.h>
int main()
{
	char a[]={'a','c','b'};
	char b[4]={'a','c','b'};
	char c[]="abc";
	char d[4]="abc";
	//cout<<sizeof(a)<<sizeof(b)<<sizeof(c)<<sizeof(d)<<endl;
	//cout<<strlen(a)<<strlen(b)<<strlen(c)<<strlen(d)<<endl;
	printf("%d",sizeof(a));
	printf("%d",sizeof(b));
	printf("%d",sizeof(c));
	printf("%d",sizeof(d));
	printf("%d",strlen(a));
	printf("%d",strlen(b));
	printf("%d",strlen(c));
	printf("%d",strlen(d));
	return 0;
}
