class Tool(object):

    # 使用赋值语句定义类属性，记录所有工具对象的数量
    count = 0

    @classmethod
    def show_tool_count(cls):

        print("工具对象数量 %d"%cls.count)

    def __init__(self,name):
        self.name = name

        # 让类属性的值 +1
        Tool.count += 1


# 创建工具对象
tool1 = Tool("斧头")

# 调用类方法
Tool.show_tool_count()
---------------------------------------------------------------
class Dog(object):

    @staticmethod
    def run():

        # 不访问实例属性/类属性
        print("小狗要跑...")

# 通过类名.调用静态方法 - 不需要创建对象
Dog.run()
------------------------------------------------------------------
class Game(object):

    # 历史最高分
    top_score = 0

    def __init__(self,player_name):
        self.player_name = player_name

    @staticmethod
    def show_help():
        print("帮助信息")

    @classmethod
    def show_top_score(cls):
        print("历史纪录 %d"%cls.top_score)

    def start_game(self):
        print("%s 开始游戏啦..."%self.player_name)

# 1. 查看游戏的帮助信息
Game.show_help()

# 2. 查看历史最高分
Game.show_top_score()

# 3. 创建游戏对象
game = Game("小明")
game.start_game()
-----------------------------------------------------------------------
class MusicPlayer(object):

    def __new__(cls,*args,**kwargs):

        # 1. 创建对象时，new方法会被自动调用
        print("创建对象，分配空间")

        # 2. 为对象分配空间
        instance = super().__new__(cls)

        # 3. 返回对象的引用
        return instance

    def __init__(self):
        print("播放器初始化")

# 创建播放器对象
player = MusicPlayer()

print(player)
