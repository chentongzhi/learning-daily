#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//枚举类型
//enum Sex
//{
//	//枚举的可能取值
//	MALE,
//	FEMALE=9,
//	SECRET
//};
//
//enum Color
//{
//	RED,
//	yellow,//可用小写
//	BLUE
//};
//

//#define MALE 0;
//int main()
//{
//	enum Sex a = MALE;
//	enum Color b = BLUE;
//	printf("%d\n", sizeof(a));//4
//	printf("%d %d %d", MALE, FEMALE, SECRET);//0,9,10
//	return 0;
//}


//枚举的优点
//1.增加代码的可读性和可维护性
//2.和#define定义的标识符比较，枚举有类型检查，更加严谨
//3.防止了命名污染（封装）
//4.便于调试
//5.使用方便，一次可以定义多个常量


//int check_sys()
//{
//	int a = 1;
//返回1，表示小端
//返回0，表示大端
//	return *(char*)&a;
//}

//int check_sys()
//{
//	union Un
//	{
//		char c;
//		int i;
//	}u;
//	u.i = 1;
//	//返回1，表示小端
//	//返回0，表示大端
//	return u.c;
//}
//
//int main()
//{
//	int a = 1;
//	int ret = check_sys();
//	if (1 == ret)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	//int a = 0x11223344;
//	//
//	//低地址-------------------->高地址
//	//	....[][][11][22][33][44][][][][][]....大端字节序存储模式
//	//	....[][][44][33][22][11][][][][][]....小端字节序存储模式
//	//讨论一个数据。放在内存中的存放的字节顺序
//	//大小端字节序问题
//
//
//	return 0;
//}


//联合体（共用体）的大小
//
//1.联合的大小至少是最大成员的大小
//2.当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍


union Un
{
	int a;//4/8 -> 4
	char arr[5];//5 - 1/8 ->1
};
int main()
{
	union Un u;
	printf("%d\n", sizeof(u));//8
	return 0;
}
