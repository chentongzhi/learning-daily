//输出“魔方阵”，所谓魔方阵是指这样的方阵，他的每一行、每一列和对角线之和均相等，
//
//例如，三阶魔方阵：8 1 6 
//                 3 5 7
//                 4 9 2
//
//要求输出1~n*n的自然数构成的魔方阵

//魔方阵中各数的排列规律如下:

//(1)将1放在第1行中间一列。

//(2)从2开始直到nXn止，各数依次按此规则存放:每一个数存放的行比前一个数的行数减1,列数加1(例如上面的三阶魔方阵,5在4的上一行后一-列)。

//(3)如果上一数的行数为1,则下一个数的行数为n(指最下一行)。例如，1在第1行，则2应放在最下一行,列数同样加1。

//(4) 当上一个数的列数为n时,下一一个数的列数应为1,行数减1。例如，2在第3行最后一列，则3应放在第2行第1列。

//(5)如果按上面规则确定的位置上已有数，或上一一个数是第1行第n列时，则把下一个数放在上一个数的下面。例如，按上面的规定,4应该放在第1行第2列，但该位置已被1占据，所以4就放在3的下面。由于6是第1行第3列(即最后一列)，故7放在6下面。按此方法可以得到任何阶的魔方阵。
#include<stdio.h>
int main()
{
	int a[15][15],i, j, k, p, n;
	p = 1;
	while (p == 1)
	{
		printf("enter(n=1--15):");
		scanf("%d", &n);
		if ((n != 0) && (n <= 15) && (n % 2 != 0))
			p = 0;
	}
	//初始化
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n; j++)
		{
			a[i][j] = 0;
		}
	}
	//建立魔方阵
	j = n / 2 + 1;
	a[1][j] = 1;
	for (k = 2; k <= n*n; k++)
	{
		i = i - 1;
		j = j + 1;
		if ((i<1) && (j>n))
		{
			i = i + 2;
			j = j - 1;
		}
		else
		{
			if (i < 1)
				i = n;
			if (j>n)
				j = 1;
		}
		if (a[i][j] == 0)
			a[i][j] = k;
		else
		{
			i = i + 2;
			j = j - 1;
			a[i][j] = k;
		}
	}
	//输出魔方阵
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n; j++)
		{
			printf("%5d", a[i][j]);
		}
		printf("\n");
	}
	return 0;
}
---------------------------------------------------------------------------------
//找出一个二维数组中的鞍点，技该位置上的元素在该行最大、在该列最小。也可能没有鞍点
#include<stdio.h>
#define N 4
#define M 5
int main()
{
	int i, j, k, a[N][M], max, maxj, flag;
	printf("please input matrie: \n");
	for (i = 0; i < N;i++)
	for (j = 0; j < M; j++)
		scanf("%d", &a[i][j]);
	for (i = 0; i < N; i++)
	{
		max = a[i][0];
		maxj = 0;
		for (j = 0; j < M; j++)
		{
			if (a[i][j]>max)
			{
				max = a[i][j];
				maxj = j;
			}
		}
		flag = 1;
		for (k = 0; k < N; k++)
		if (max>a[k][maxj])
		{
			flag = 0; 
			continue;
		}
		if (flag)
		{
			printf("a[%d][%d]=%d\n", i, maxj, max);
			break;
		}
	}
	if (!flag)
	{
		printf("没有鞍点\n");
	}
	return 0;
}
------------------------------------------------------------------------------
有15个数按由大到小顺序存放在一个数组中，输入一个数，要求用折半查找法找出该书是数组中第几个元素的值，如果该数不在数组中，则输出“无此数”
#include<stdio.h>
#define N 15
int main()
{
	int i, number, top, bott, mid, loca, a[N], flag = 1, sign;
	char c;
	printf("enter data: \n");
	scanf("%d", &a[0]);
	i = 1;
	while (i < N)
	{
		scanf("%d", &a[1]);
		if (a[i] >= a[i - 1])
			i++;
		else
			printf("enter this data again:\n");
	}
	printf("\n");
	for (i = 0; i < N; i++)
	{
		printf("%5d",a[i]);
	}
	printf("\n");
	while (flag)
	{
		printf("input number to look for: ");
		scanf("%d", &number);
		sign = 0;
		top = 0;
		bott = N - 1;
		if ((number<a[0]) || (number>a[N - 1]))
			loca = -1;
		while ((!sign) && (top <= bott))
		{
			mid = (bott + top) / 2;
			if (number == a[mid])
			{
				loca = mid;
				printf("Its position is %d\n", loca + 1);
				sign = 1;
			}
			else if (number < a[mid])
				bott = mid - 1;
			else
				top = mid + 1;
		}
		if (!sign || loca == -1)
			printf("cannot find it\n");
		printf("continue or not(Y\N)?");
		scanf("%c", &c);
		if (c == 'N' || c == 'n')
			flag = 0;
	}
	return 0;
}
