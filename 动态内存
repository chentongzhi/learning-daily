#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>

//1.malloc
//int main()
//{
//	//向内存申请40个整形的空间
//	int* p = (int*)malloc(40);
//	if (p == NULL)
//	{
//		//打印错误原因的一种方式
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		//正常使用
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	//当动态申请的空间不再使用的时候
//	//就应该还给操作系统
//	free(p);
//	p = NULL;
//	return 0;
//}

//2.calloc
//int main()
//{
//	//malloc(10*sizeof(int));
//	int *p = (int*)calloc(10, sizeof(int));
//
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	//释放空间
//	//free函数是用来释放动态开辟的空间的
//	free(p);
//	p = NULL;
//	return 0;
//}


//3.realloc
//调整动态开辟内存空间的大小

//int main()
//{
//		int *p = (int*)malloc(20);
//	
//		if (p == NULL)
//		{
//			printf("%s\n", strerror(errno));
//		}
//		else
//		{
//			int i = 0;
//			for (i = 0; i < 5; i++)
//			{
//				printf("%d ", *(p + i));
//			}
//		}
//		//就是在使用malloc开辟的20个字节的空间
//		//假设这里，20个字节不能满足我们的使用要求
//		//希望我们能够有40个字节的空间
//	    //这里就可以使用realloc来调整动态开辟的内存
//		//
//		//realloc使用的注意事项：
//		//1.如果p指向的空间之后有足够的内存空间可以追加，就直接追加，后返回p
//		//2.如果p指向的空间之后没有足够的内存空间可以追加，则realloc函数会重新找一个新的内存区域
//		// 开辟一块满足需求的空间，并且把原来内存中的数据拷贝回来，释放旧的内存空间
//		// 最后返回新开辟的内存空间地址
//		//3.得用一个新的变量来接收realloc函数的返回值
//		//
//		int *ptr = realloc(p, INT_MAX);
//
//		if (ptr != NULL)
//		{
//			p = ptr;
//			int i = 0;
//			for (i = 5; i < 10; i++)
//			{
//				*(p + i) = i;
//			}
//			for (i = 0; i < 10; i++)
//			{
//				printf("%d\n", *(p + i));
//			}
//		}
//	return 0;
//}


//4.常见错误
//（1）对NULL进行解引用操作
//int main()
//{
//	int* p = (int*)malloc(40);
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	free(p);
//	p = NULL;
//	return 0;
//}
//
//(2)对动态开辟的内存的越界访问
//int main()
//{
//	int* p = (int*)malloc(5);
//	if (p == NULL)
//	{
//		//打印错误原因的一种方式
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		//正常使用
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}

//(3)对非动态开辟空间的free
//int main()
//{
//	int a = 10;
//	int*p = &a;
//	*p = 20;
//	free(p);
//	p = NULL;
//	return 0;
//}

//(4)使用free释放动态开辟内存的一部分
//int main()
//{
//	int*p = (int*)malloc(40);
//	if (p == NULL)
//	{
//		return 0;
//	}
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*p++ = i;
//	}
//	//回收空间
//	free(p);
//	p = NULL;
//
//	return 0;
//}

//(5)对同一块动态内存的多次释放
//int main()
//{
//		int*p = (int*)malloc(40);
//		if (p == NULL)
//		{
//			return 0;
//		}
//		//释放
//		free(p);
//		//……
//		free(p);
//	return 0;
//}

//(6)动态开辟内存忘记释放（内存泄漏）
//int main()
//{
//	while (1)
//	{
//		malloc(1);
//		Sleep(1000);
//	}
//	return 0;
//}
