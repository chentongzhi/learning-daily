class MusicPlayer(object):

    # 记录第一个被创建对象的引用
    instance = None

    def __new__(cls, *args, **kwargs):

        # 1. 判断类属性是否为空
        if cls.instance is None:

            # 2. 调用父类的方法，为第一对象分配空间
            cls.instance = super().__new__(cls)
        # 3. 返回类属性保存的对象引用
        return cls.instance
# 创建多个对象
player1 = MusicPlayer()
print(player1)

player2 = MusicPlayer()
print(player2)
-------------------------------------------------------
class MusicPlayer(object):

    # 记录第一个被创建对象的引用
    instance = None

    # 记录是否执行过初始化动作
    init_flag = False

    def __new__(cls, *args, **kwargs):

        # 1. 判断类属性是否为空
        if cls.instance is None:

            # 2. 调用父类的方法，为第一对象分配空间
            cls.instance = super().__new__(cls)
        # 3. 返回类属性保存的对象引用
        return cls.instance

    def __init__(self):

        # 1. 判断是否执行过初始化
        if MusicPlayer.init_flag:
            return
        # 2. 如果没有执行过，在执行初始化动作
        print("初始化播放器")
        # 3. 修改类属性的标记
        MusicPlayer.init_flag = True

# 创建多个对象
player1 = MusicPlayer()
print(player1)

player2 = MusicPlayer()
print(player2)
-------------------------------------------------------------
try:
    # 不能确认正确执行的代码
    num = int(input("请输入一个整数: "))
except:
    # 错误的处理代码
    print("请输入正确的整数")

print("-"*50)
------------------------------------------------------------
try:
    # 提示用户输入一个整数
    num = int(input("请输入一个整数"))

    # 使用 8 除以用户输入的整数并且输出
    result = 8 / num
    print(result)

# except ZeroDivisionError:
#    print("除0错误")
except ValueError:
    print("请输入正确的整数")
except Exception as result:
    print("未知错误 %s"% result)
else:
    print("尝试成功")
finally:
    print("无论是否出现错误都会执行的代码")
------------------------------------------------------------
def demo1():
    return int(input("请输入一个整数: "))

def demo2():
    return demo1()

# 利用异常的传递性，在主程序捕获异常
try:
    print(demo2())
except Exception as result:
    print("未知错误 %s"% result)
----------------------------------------------------------------
def input_password():

    # 1. 提示用户输入密码
    pwd = input("请输入密码: ")

    # 2. 判断密码长度 >= 8,返回用户输入的密码
    if len(pwd) >= 8:
        return pwd

    # 3. 如果 < 8 主动抛出异常
    print("主动抛出异常")
    # 1> 创建异常对象
    ex = Exception("密码长度不够")

    # 2> 主动抛出异常
    raise ex

# 提示用户输入密码
try:
    print(input_password())
except Exception as result:
    print(result)
---------------------------------------------------------------
import random

print(random.__file__)

rand = random.randint(1,10)

print(rand)
