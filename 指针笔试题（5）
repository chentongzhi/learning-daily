#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<string.h>

int main()
{
	//数组名是首元素的地址
	//1.sizeof(数组名) - 数组名表示整个数组
	//2.&数组名 - 数组名表示整个数组
	//
	//一堆数组
	//int a[] = { 1, 2, 3, 4 };
	//printf("%d\n",sizeof(a));//sizeof(数组名) - 计算的是数组总大小 - 单位是字节 - 4*4=16
	//printf("%d\n", sizeof(a + 0));//4/8 - 数组名在这里表示首元素的值，a+0还是首元素地址，地址的大小就是4/8个字节
	//printf("%d\n", sizeof(*a));//4 - 数组名表示首元素地址，*a就是首元素，sizeof(*a)就是4
	//printf("%d\n", sizeof(a + 1));//4/8 - 数组名这里表示首元素的值，a+1是第2个元素的地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(a[1]));//4 - 第2个元素的大小
	//printf("%d\n", sizeof(&a));//4/8 - &a取出的是数组的地址，但是数组的地址也是地址，地址的大小就是4/8个字节
	//printf("%d\n", sizeof(*&a));//16 - &a是数组的地址，数组的地址解引用访问的是数组，sizeof计算的就是数组的大小单位是字节
	//printf("%d\n", sizeof(&a+1));//4/8 - &a是数组的地址，&a+1虽然是地址跳过整个数组，但还是地址，所以是4/8个字节
	//printf("%d\n", sizeof(&a[0]));//4/8 - &a[0]是第一个元素的地址
	//printf("%d\n", sizeof(&a[0]+1));//4/8 - &a[0]+1是第二个元素的地址



	//字符数组
	//char arr[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
	//printf("%d\n", sizeof(arr));//sizeof计算的是数组大小，6*1=6个字节
	//printf("%d\n", sizeof(arr + 0));//4/8 - arr是首元素的地址，arr+0还是首元素地址，地址的大小是4/8字节
	//printf("%d\n", sizeof(*arr));//1 - arr是首元素的地址，*arr就是首元素，首元素的字符大小是一个字节
	//printf("%d\n", sizeof(arr[1]));// 1
	//printf("%d\n", sizeof(&arr)); //4/8 - &arr 虽然是数组的地址，但还是地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(&arr + 1)); //4/8 &arr+ 1 是跳过整个数组后的地址，地址大小是4/8个字节
	//printf("%d\n", sizeof(&arr[0] + 1)); //4/8 第二个元素的地址


	//字符数组
	//char arr[] = { 'a', 'b', 'c', 'd', 'e', 'f' };

	//printf("%d\n", strlen(arr));//随机值，arr传过去首元素地址，strlen遇到\0才会结束
	//printf("%d\n", strlen(arr + 0));//随机值
	//printf("%d\n", strlen(*arr));//对首元素地址解引用，传过去'a' - 97，发生非法访问，err
	//printf("%d\n", strlen(arr[1]));//传过去'b'，发生非法访问，err
	//printf("%d\n", strlen(&arr));//随机值
	//printf("%d\n", strlen(&arr+1));//随机值-6，跳过了arr数组的六个元素
	//printf("%d\n", strlen(&arr[0]+1));//随机值-1，跳过了第一个元素


	//return 0;
}




int main()
{
	char arr[] = "abcdef";   //存放了a b c d e f \0 
	//printf("%d\n", sizeof(arr));//sizeof计算的是数组大小，7个字节（包括\0）
	//printf("%d\n", sizeof(arr + 0));//4/8 - arr是首元素的地址，arr+0还是首元素地址，地址的大小是4/8字节
	//printf("%d\n", sizeof(*arr));//1 - arr是首元素的地址，*arr就是首元素，首元素的字符大小是一个字节
	//printf("%d\n", sizeof(arr[1]));// 1
	//printf("%d\n", sizeof(&arr)); //4/8 - &arr 虽然是数组的地址，但还是地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(&arr + 1)); //4/8 &arr+ 1 是跳过整个数组后的地址，地址大小是4/8个字节
	//printf("%d\n", sizeof(&arr[0] + 1));//4/8 



	//printf("%d\n", strlen(arr));//6，arr传过去首元素地址，strlen遇到\0会结束
	//printf("%d\n", strlen(arr + 0));//6 
	//printf("%d\n", strlen(*arr));//对首元素地址解引用，传过去'a' - 97，发生非法访问，err
	//printf("%d\n", strlen(arr[1]));//传过去'b'，发生非法访问，err
	//printf("%d\n", strlen(&arr));//6  &arr - 数组的地址 - 数组指针 - char(*p)[]=&arr，而strlen内为const char*，会出现警告
	//printf("%d\n", strlen(&arr+1));//随机值，跳过了arr数组，向后寻找\0
	//printf("%d\n", strlen(&arr[0]+1));//5，跳过第一个元素



	char* p = "abcdef"; //p内存放的是字符串首元素a的地址
	//
	//printf("%d\n", sizeof(p));//4/8 - 计算指针变量的大小
	//printf("%d\n", sizeof(p + 1));//4/8 - p是首元素地址，p+1是‘b’的地址
	//printf("%d\n", sizeof(*p));//1 - p是首元素的地址，*p就是首元素，首元素的字符大小是一个字节
	//printf("%d\n", sizeof(p[0]));// 1 int arr[10] ;   arr[0] == *(arr+0)    ->   p[0] ==*(p+0)=='a'
	//printf("%d\n", sizeof(&p)); //4/8 - &p 虽然是p的地址，但还是地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(&p + 1)); //4/8 &p+ 1 ,地址大小是4/8个字节
	//printf("%d\n", sizeof(&p[0] + 1));//4/8 



	//printf("%d\n", strlen(p));//6，p传过去首元素地址，strlen遇到\0会结束
	//printf("%d\n", strlen(p + 1));//5
	//printf("%d\n", strlen(*p));//对首元素地址解引用，传过去'a' - 97，发生非法访问，err
	//printf("%d\n", strlen(p[0]));//传过去'a'，发生非法访问，err
	//printf("%d\n", strlen(&p));//随机值  &p -> p的地址 - 是生成p时所占用的位置，并不是原来的'a'
	//printf("%d\n", strlen(&p+1));//随机值，跳过了p，向后寻找\0
	//printf("%d\n", strlen(&p[0]+1));//5，跳过第一个元素


	return 0;
}



//int main()
//{
//	int a[3][4] = { 0 };
//
//	printf("%p\n", &a[0][0]);
//	printf("%p\n", a[0] + 1);
//	printf("%p\n", a + 1);
//	printf("%p\n", &a[0] + 1);
//
//	printf("%d\n", sizeof(a));//48
//	printf("%d\n", sizeof(a[0][0]));//a
//	printf("%d\n", sizeof(a[0]));//16 a[0]相当于第一行作为一维数组的数组名
//	//sizeof(a[0])把数组名单独放在sizeof()内，计算的是第一行的大小
//	printf("%d\n", sizeof(a[0]+1);//4 - a[0]是第一行的数组名，数组名此时是首元素地址，a[0]其实就是第一行第一个元素
//	//所以a[0]+1就是第一行第二个元素的地址 - 地址大小是4/8个字节
//
//	printf("%d\n", sizeof(*(a[0] + 1)));//4 对(a[0]+1)解引用，就是第一行第二个元素，大小是4个字节
//	printf("%d\n", sizeof(a+1));//a是二维数组的数组名，没有sizeof(a),也没有&a，所以a是首元素地址
//	//而把二维数组看作一堆数组是，二维数组的首元素是他的第一行，a就是第一行(首元素)的地址
//	//a+1就是第二行的地址
//
//	printf("%d\n", sizeof(*(a + 1)));//16  sizeof(a[1])计算的是第二行
//	printf("%d\n", sizeof(&a[0]+1));//4，第二行的地址
//	printf("%d\n", sizeof(*(&a[0] + 1)));//16，计算第二行的大小
//	printf("%d\n", sizeof(*a));//16 a是首元素地址 - 第一行的地址，*a就是第一行，sizeof(*a)就是计算第一行的大小
//	printf("%d\n", sizeof(a[3]));//16，只是看类型，不会具体访问a[3]，所以不会出现非法访问
//	return 0;
//
//}



//int main()
//{
//	int a[5] = { 1, 2, 3, 4, 5 };
//	int *ptr = (int *)(&a + 1);
//	printf("%d,%d\n", *(a + 1), *(ptr - 1));  //2,5
//	return 0;
//}



//struct Test
//{
//	int Num;
//	char* pcName;
//	short sDate;
//	char cha[2];
//	short sBa[4];
//}*p;
//
////假设p的值为0x100000，如下表表达式的值分别是多少？
////已知，结构体Test类型的变量大小是20个字节
//
//int main()
//{
//	printf("%p\n", p + 0x1);//0x0010014
//	printf("%p\n", (unsigned long)p + 0x1);//0x00100001
//	printf("%p\n", (unsigned int*)p + 0x1);//0x00100004
//
//
//	return 0;
//}



//int main()
//{
//	int a[4] = { 1, 2, 3, 4 };
//	int *ptr1 = (int*)(&a + 1);
//	int *ptr2 = (int*)((int)a + 1);
//	printf("%x,%x", ptr1[-1], *ptr2);//4,200000
//	return 0;
//}



//#include<stdio.h>
//int main()
//{
//	int a[3][2] = { (0, 1), (2, 3), (3, 4) };
//	int *p;
//	p = a[0];
//	printf("%d\n", p[0]);//1
//
//	return 0;
//}


//
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;
//	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
//	return 0;//ff ff ff fc ,-4
//}
